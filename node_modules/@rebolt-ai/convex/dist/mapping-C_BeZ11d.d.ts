interface ActionConfig {
    credential_id?: string;
    action_version?: string;
}
interface ActionExecutionResponse<TOutput> {
    success: boolean;
    action_id: string;
    output?: TOutput | null;
    error_message?: string | null;
}
type Action<TInputs, TOutputs> = (params: {
    inputs: TInputs;
    config?: ActionConfig;
}) => Promise<ActionExecutionResponse<TOutputs>>;
type AnyAction = Action<unknown, unknown>;
interface ActionManifest<TInputs, TOutputs> {
    action_id: string;
    version: string;
    action_type: Action<TInputs, TOutputs>;
}

declare const GMAIL_SEND_EMAIL = "GMAIL_SEND_EMAIL";
interface GmailSendEmailInputs {
    subject: string;
    recipients: Array<string>;
    bcc?: Array<string> | null;
    cc?: Array<string> | null;
    content: string;
}
interface GmailSendEmailOutputs {
    message_id: string;
    thread_id: string;
}
type GmailSendEmailAction = Action<GmailSendEmailInputs, GmailSendEmailOutputs>;
declare const GmailSendEmailManifest: ActionManifest<GmailSendEmailInputs, GmailSendEmailOutputs>;

declare const GMAIL_DELETE_EMAIL = "GMAIL_DELETE_EMAIL";
interface GmailDeleteEmailInputs {
    message_id: string;
}
interface GmailDeleteEmailOutputs {
}
type GmailDeleteEmailAction = Action<GmailDeleteEmailInputs, GmailDeleteEmailOutputs>;
declare const GmailDeleteEmailManifest: ActionManifest<GmailDeleteEmailInputs, GmailDeleteEmailOutputs>;

declare const GMAIL_LIST_EMAILS = "GMAIL_LIST_EMAILS";
interface GmailListEmailsInputs {
    query?: string | null;
    label_ids?: Array<string> | null;
    fail_if_not_found?: boolean | null;
    num_results?: number | null;
    page_token?: string | null;
}
interface GmailListEmailsOutputs {
    page_token?: string | null;
    messages: Array<{
        id: string;
        thread_id: string;
        subject?: string | null;
        from_address?: string | null;
        to?: Array<string> | null;
        cc?: Array<string> | null;
        content_html?: string | null;
        snippet?: string | null;
    }>;
}
type GmailListEmailsAction = Action<GmailListEmailsInputs, GmailListEmailsOutputs>;
declare const GmailListEmailsManifest: ActionManifest<GmailListEmailsInputs, GmailListEmailsOutputs>;

declare const GMAIL_REPLY_TO_EMAIL = "GMAIL_REPLY_TO_EMAIL";
interface GmailReplyToEmailInputs {
    thread_id: string;
    content: string;
}
interface GmailReplyToEmailOutputs {
    message_id: string;
    thread_id: string;
}
type GmailReplyToEmailAction = Action<GmailReplyToEmailInputs, GmailReplyToEmailOutputs>;
declare const GmailReplyToEmailManifest: ActionManifest<GmailReplyToEmailInputs, GmailReplyToEmailOutputs>;

declare const GDRIVE_CREATE_FOLDER = "GDRIVE_CREATE_FOLDER";
interface GdriveCreateFolderInputs {
    parent_folder_id?: string | null;
    folder_name: string;
}
interface GdriveCreateFolderOutputs {
    created_folder: {
        folder_id: string;
        name: string;
        path: string;
        created_at: string;
        parent_folder_id?: string | null;
    };
}
type GdriveCreateFolderAction = Action<GdriveCreateFolderInputs, GdriveCreateFolderOutputs>;
declare const GdriveCreateFolderManifest: ActionManifest<GdriveCreateFolderInputs, GdriveCreateFolderOutputs>;

declare const GDRIVE_DELETE_RESOURCE = "GDRIVE_DELETE_RESOURCE";
interface GdriveDeleteResourceInputs {
    resource_id: string;
    confirm_deletion: boolean;
}
interface GdriveDeleteResourceOutputs {
    success: boolean;
    deleted_resource_id: string;
    message: string;
}
type GdriveDeleteResourceAction = Action<GdriveDeleteResourceInputs, GdriveDeleteResourceOutputs>;
declare const GdriveDeleteResourceManifest: ActionManifest<GdriveDeleteResourceInputs, GdriveDeleteResourceOutputs>;

declare const GDRIVE_DOWNLOAD_FILE = "GDRIVE_DOWNLOAD_FILE";
interface GdriveDownloadFileInputs {
    resource_id: string;
}
interface GdriveDownloadFileOutputs {
    file_name: string;
    file_size_bytes: number;
    mime_type: string;
    file_content: string;
}
type GdriveDownloadFileAction = Action<GdriveDownloadFileInputs, GdriveDownloadFileOutputs>;
declare const GdriveDownloadFileManifest: ActionManifest<GdriveDownloadFileInputs, GdriveDownloadFileOutputs>;

declare const GDRIVE_GET_MOUNT_POINTS = "GDRIVE_GET_MOUNT_POINTS";
interface GdriveGetMountPointsInputs {
    num_results?: number | null;
    page_token?: string | null;
}
interface GdriveGetMountPointsOutputs {
    page_token?: string | null;
    mount_points: Array<{
        folder_id: string;
        name: string;
        path: string;
        created_at: string;
        parent_folder_id?: string | null;
    }>;
}
type GdriveGetMountPointsAction = Action<GdriveGetMountPointsInputs, GdriveGetMountPointsOutputs>;
declare const GdriveGetMountPointsManifest: ActionManifest<GdriveGetMountPointsInputs, GdriveGetMountPointsOutputs>;

declare const GDRIVE_LIST_ITEMS = "GDRIVE_LIST_ITEMS";
interface GdriveListItemsInputs {
    parent_folder_id?: string | null;
    search_string?: string | null;
    num_results?: number | null;
    page_token?: string | null;
}
interface GdriveListItemsOutputs {
    page_token?: string | null;
    resources: Array<{
        resource_id: string;
        name: string;
        resource_type: string;
        path: string;
        created_at: string;
        updated_at: string;
        size_bytes?: number | null;
        mime_type?: string | null;
    }>;
}
type GdriveListItemsAction = Action<GdriveListItemsInputs, GdriveListItemsOutputs>;
declare const GdriveListItemsManifest: ActionManifest<GdriveListItemsInputs, GdriveListItemsOutputs>;

declare const GDRIVE_UPLOAD_FILE = "GDRIVE_UPLOAD_FILE";
interface GdriveUploadFileInputs {
    parent_folder_id?: string | null;
    file_data: {
        file_name: string;
        content_base64: string;
        mime_type?: string | null;
    };
}
interface GdriveUploadFileOutputs {
    uploaded_file: {
        file_id: string;
        name: string;
        path: string;
        size_bytes: number;
        mime_type: string;
        created_at: string;
        updated_at: string;
        parent_folder_id?: string | null;
    };
}
type GdriveUploadFileAction = Action<GdriveUploadFileInputs, GdriveUploadFileOutputs>;
declare const GdriveUploadFileManifest: ActionManifest<GdriveUploadFileInputs, GdriveUploadFileOutputs>;

declare const ONEDRIVE_CREATE_FOLDER = "ONEDRIVE_CREATE_FOLDER";
interface OnedriveCreateFolderInputs {
    parent_folder_id?: string | null;
    folder_name: string;
}
interface OnedriveCreateFolderOutputs {
    created_folder: {
        folder_id: string;
        name: string;
        path: string;
        created_at: string;
        parent_folder_id?: string | null;
    };
}
type OnedriveCreateFolderAction = Action<OnedriveCreateFolderInputs, OnedriveCreateFolderOutputs>;
declare const OnedriveCreateFolderManifest: ActionManifest<OnedriveCreateFolderInputs, OnedriveCreateFolderOutputs>;

declare const ONEDRIVE_DELETE_RESOURCE = "ONEDRIVE_DELETE_RESOURCE";
interface OnedriveDeleteResourceInputs {
    resource_id: string;
    confirm_deletion: boolean;
}
interface OnedriveDeleteResourceOutputs {
    success: boolean;
    deleted_resource_id: string;
    message: string;
}
type OnedriveDeleteResourceAction = Action<OnedriveDeleteResourceInputs, OnedriveDeleteResourceOutputs>;
declare const OnedriveDeleteResourceManifest: ActionManifest<OnedriveDeleteResourceInputs, OnedriveDeleteResourceOutputs>;

declare const ONEDRIVE_DOWNLOAD_FILE = "ONEDRIVE_DOWNLOAD_FILE";
interface OnedriveDownloadFileInputs {
    resource_id: string;
}
interface OnedriveDownloadFileOutputs {
    file_name: string;
    file_size_bytes: number;
    mime_type: string;
    file_content: string;
}
type OnedriveDownloadFileAction = Action<OnedriveDownloadFileInputs, OnedriveDownloadFileOutputs>;
declare const OnedriveDownloadFileManifest: ActionManifest<OnedriveDownloadFileInputs, OnedriveDownloadFileOutputs>;

declare const ONEDRIVE_GET_MOUNT_POINTS = "ONEDRIVE_GET_MOUNT_POINTS";
interface OnedriveGetMountPointsInputs {
    num_results?: number | null;
    page_token?: string | null;
}
interface OnedriveGetMountPointsOutputs {
    page_token?: string | null;
    mount_points: Array<{
        folder_id: string;
        name: string;
        path: string;
        created_at: string;
        parent_folder_id?: string | null;
    }>;
}
type OnedriveGetMountPointsAction = Action<OnedriveGetMountPointsInputs, OnedriveGetMountPointsOutputs>;
declare const OnedriveGetMountPointsManifest: ActionManifest<OnedriveGetMountPointsInputs, OnedriveGetMountPointsOutputs>;

declare const ONEDRIVE_LIST_ITEMS = "ONEDRIVE_LIST_ITEMS";
interface OnedriveListItemsInputs {
    parent_folder_id?: string | null;
    search_string?: string | null;
    num_results?: number | null;
    page_token?: string | null;
}
interface OnedriveListItemsOutputs {
    page_token?: string | null;
    resources: Array<{
        resource_id: string;
        name: string;
        resource_type: string;
        path: string;
        created_at: string;
        updated_at: string;
        size_bytes?: number | null;
        mime_type?: string | null;
    }>;
}
type OnedriveListItemsAction = Action<OnedriveListItemsInputs, OnedriveListItemsOutputs>;
declare const OnedriveListItemsManifest: ActionManifest<OnedriveListItemsInputs, OnedriveListItemsOutputs>;

declare const ONEDRIVE_UPLOAD_FILE = "ONEDRIVE_UPLOAD_FILE";
interface OnedriveUploadFileInputs {
    parent_folder_id?: string | null;
    file_data: {
        file_name: string;
        content_base64: string;
        mime_type?: string | null;
    };
}
interface OnedriveUploadFileOutputs {
    uploaded_file: {
        file_id: string;
        name: string;
        path: string;
        size_bytes: number;
        mime_type: string;
        created_at: string;
        updated_at: string;
        parent_folder_id?: string | null;
    };
}
type OnedriveUploadFileAction = Action<OnedriveUploadFileInputs, OnedriveUploadFileOutputs>;
declare const OnedriveUploadFileManifest: ActionManifest<OnedriveUploadFileInputs, OnedriveUploadFileOutputs>;

declare const RESEND_SEND_EMAIL = "RESEND_SEND_EMAIL";
interface ResendSendEmailInputs {
    subject: string;
    recipients: Array<string>;
    bcc?: Array<string> | null;
    cc?: Array<string> | null;
    content: string;
}
interface ResendSendEmailOutputs {
    email_id: string;
}
type ResendSendEmailAction = Action<ResendSendEmailInputs, ResendSendEmailOutputs>;
declare const ResendSendEmailManifest: ActionManifest<ResendSendEmailInputs, ResendSendEmailOutputs>;

declare const RUN_REBOLT_AGENT = "RUN_REBOLT_AGENT";
interface RunReboltAgentInputs {
    system_prompt: string;
    user_prompt: string;
    attachments?: Array<{
        mime_type: string;
        file_url?: string | null;
        base64_encoded_data?: string | null;
    }>;
}
interface RunReboltAgentOutputs {
    response: string;
}
type RunReboltAgentAction = Action<RunReboltAgentInputs, RunReboltAgentOutputs>;
declare const RunReboltAgentManifest: ActionManifest<RunReboltAgentInputs, RunReboltAgentOutputs>;

declare const EXA_AI_WEB_SEARCH = "EXA_AI_WEB_SEARCH";
interface ExaAiWebSearchInputs {
    query: string;
    num_results: number;
}
interface ExaAiWebSearchOutputs {
    contents?: string | null;
    results: Array<{
        title?: string | null;
        id?: string | null;
        url?: string | null;
        text?: string | null;
        image?: string | null;
        favicon?: string | null;
        published_date?: string | null;
        author?: string | null;
        score?: number | null;
    }>;
}
type ExaAiWebSearchAction = Action<ExaAiWebSearchInputs, ExaAiWebSearchOutputs>;
declare const ExaAiWebSearchManifest: ActionManifest<ExaAiWebSearchInputs, ExaAiWebSearchOutputs>;

declare const EXA_AI_WEB_CRAWL = "EXA_AI_WEB_CRAWL";
interface ExaAiWebCrawlInputs {
    urls: Array<string>;
}
interface ExaAiWebCrawlOutputs {
    results: Array<{
        url?: string | null;
        title?: string | null;
        text?: string | null;
        image?: string | null;
        favicon?: string | null;
        failure_reason?: string | null;
    }>;
}
type ExaAiWebCrawlAction = Action<ExaAiWebCrawlInputs, ExaAiWebCrawlOutputs>;
declare const ExaAiWebCrawlManifest: ActionManifest<ExaAiWebCrawlInputs, ExaAiWebCrawlOutputs>;

declare const DROPBOX_CREATE_FOLDER = "DROPBOX_CREATE_FOLDER";
interface DropboxCreateFolderInputs {
    parent_folder_id?: string | null;
    folder_name: string;
}
interface DropboxCreateFolderOutputs {
    created_folder: {
        folder_id: string;
        name: string;
        path: string;
        created_at: string;
        parent_folder_id?: string | null;
    };
}
type DropboxCreateFolderAction = Action<DropboxCreateFolderInputs, DropboxCreateFolderOutputs>;
declare const DropboxCreateFolderManifest: ActionManifest<DropboxCreateFolderInputs, DropboxCreateFolderOutputs>;

declare const DROPBOX_DELETE_RESOURCE = "DROPBOX_DELETE_RESOURCE";
interface DropboxDeleteResourceInputs {
    resource_id: string;
    confirm_deletion: boolean;
}
interface DropboxDeleteResourceOutputs {
    success: boolean;
    deleted_resource_id: string;
    message: string;
}
type DropboxDeleteResourceAction = Action<DropboxDeleteResourceInputs, DropboxDeleteResourceOutputs>;
declare const DropboxDeleteResourceManifest: ActionManifest<DropboxDeleteResourceInputs, DropboxDeleteResourceOutputs>;

declare const DROPBOX_DOWNLOAD_FILE = "DROPBOX_DOWNLOAD_FILE";
interface DropboxDownloadFileInputs {
    resource_id: string;
}
interface DropboxDownloadFileOutputs {
    file_name: string;
    file_size_bytes: number;
    mime_type: string;
    file_content: string;
}
type DropboxDownloadFileAction = Action<DropboxDownloadFileInputs, DropboxDownloadFileOutputs>;
declare const DropboxDownloadFileManifest: ActionManifest<DropboxDownloadFileInputs, DropboxDownloadFileOutputs>;

declare const DROPBOX_GET_MOUNT_POINTS = "DROPBOX_GET_MOUNT_POINTS";
interface DropboxGetMountPointsInputs {
    num_results?: number | null;
    page_token?: string | null;
}
interface DropboxGetMountPointsOutputs {
    page_token?: string | null;
    mount_points: Array<{
        folder_id: string;
        name: string;
        path: string;
        created_at: string;
        parent_folder_id?: string | null;
    }>;
}
type DropboxGetMountPointsAction = Action<DropboxGetMountPointsInputs, DropboxGetMountPointsOutputs>;
declare const DropboxGetMountPointsManifest: ActionManifest<DropboxGetMountPointsInputs, DropboxGetMountPointsOutputs>;

declare const DROPBOX_LIST_ITEMS = "DROPBOX_LIST_ITEMS";
interface DropboxListItemsInputs {
    parent_folder_id?: string | null;
    search_string?: string | null;
    num_results?: number | null;
    page_token?: string | null;
}
interface DropboxListItemsOutputs {
    page_token?: string | null;
    resources: Array<{
        resource_id: string;
        name: string;
        resource_type: string;
        path: string;
        created_at: string;
        updated_at: string;
        size_bytes?: number | null;
        mime_type?: string | null;
    }>;
}
type DropboxListItemsAction = Action<DropboxListItemsInputs, DropboxListItemsOutputs>;
declare const DropboxListItemsManifest: ActionManifest<DropboxListItemsInputs, DropboxListItemsOutputs>;

declare const DROPBOX_UPLOAD_FILE = "DROPBOX_UPLOAD_FILE";
interface DropboxUploadFileInputs {
    parent_folder_id?: string | null;
    file_data: {
        file_name: string;
        content_base64: string;
        mime_type?: string | null;
    };
}
interface DropboxUploadFileOutputs {
    uploaded_file: {
        file_id: string;
        name: string;
        path: string;
        size_bytes: number;
        mime_type: string;
        created_at: string;
        updated_at: string;
        parent_folder_id?: string | null;
    };
}
type DropboxUploadFileAction = Action<DropboxUploadFileInputs, DropboxUploadFileOutputs>;
declare const DropboxUploadFileManifest: ActionManifest<DropboxUploadFileInputs, DropboxUploadFileOutputs>;

declare const ReboltActionType: {
    readonly GMAIL_SEND_EMAIL: "GMAIL_SEND_EMAIL";
    readonly GMAIL_DELETE_EMAIL: "GMAIL_DELETE_EMAIL";
    readonly GMAIL_LIST_EMAILS: "GMAIL_LIST_EMAILS";
    readonly GMAIL_REPLY_TO_EMAIL: "GMAIL_REPLY_TO_EMAIL";
    readonly GDRIVE_CREATE_FOLDER: "GDRIVE_CREATE_FOLDER";
    readonly GDRIVE_DELETE_RESOURCE: "GDRIVE_DELETE_RESOURCE";
    readonly GDRIVE_DOWNLOAD_FILE: "GDRIVE_DOWNLOAD_FILE";
    readonly GDRIVE_GET_MOUNT_POINTS: "GDRIVE_GET_MOUNT_POINTS";
    readonly GDRIVE_LIST_ITEMS: "GDRIVE_LIST_ITEMS";
    readonly GDRIVE_UPLOAD_FILE: "GDRIVE_UPLOAD_FILE";
    readonly ONEDRIVE_CREATE_FOLDER: "ONEDRIVE_CREATE_FOLDER";
    readonly ONEDRIVE_DELETE_RESOURCE: "ONEDRIVE_DELETE_RESOURCE";
    readonly ONEDRIVE_DOWNLOAD_FILE: "ONEDRIVE_DOWNLOAD_FILE";
    readonly ONEDRIVE_GET_MOUNT_POINTS: "ONEDRIVE_GET_MOUNT_POINTS";
    readonly ONEDRIVE_LIST_ITEMS: "ONEDRIVE_LIST_ITEMS";
    readonly ONEDRIVE_UPLOAD_FILE: "ONEDRIVE_UPLOAD_FILE";
    readonly RESEND_SEND_EMAIL: "RESEND_SEND_EMAIL";
    readonly RUN_REBOLT_AGENT: "RUN_REBOLT_AGENT";
    readonly EXA_AI_WEB_SEARCH: "EXA_AI_WEB_SEARCH";
    readonly EXA_AI_WEB_CRAWL: "EXA_AI_WEB_CRAWL";
    readonly DROPBOX_CREATE_FOLDER: "DROPBOX_CREATE_FOLDER";
    readonly DROPBOX_DELETE_RESOURCE: "DROPBOX_DELETE_RESOURCE";
    readonly DROPBOX_DOWNLOAD_FILE: "DROPBOX_DOWNLOAD_FILE";
    readonly DROPBOX_GET_MOUNT_POINTS: "DROPBOX_GET_MOUNT_POINTS";
    readonly DROPBOX_LIST_ITEMS: "DROPBOX_LIST_ITEMS";
    readonly DROPBOX_UPLOAD_FILE: "DROPBOX_UPLOAD_FILE";
};
declare const actionDefinitions: {
    readonly GMAIL_SEND_EMAIL: ActionManifest<GmailSendEmailInputs, GmailSendEmailOutputs>;
    readonly GMAIL_DELETE_EMAIL: ActionManifest<GmailDeleteEmailInputs, GmailDeleteEmailOutputs>;
    readonly GMAIL_LIST_EMAILS: ActionManifest<GmailListEmailsInputs, GmailListEmailsOutputs>;
    readonly GMAIL_REPLY_TO_EMAIL: ActionManifest<GmailReplyToEmailInputs, GmailReplyToEmailOutputs>;
    readonly GDRIVE_CREATE_FOLDER: ActionManifest<GdriveCreateFolderInputs, GdriveCreateFolderOutputs>;
    readonly GDRIVE_DELETE_RESOURCE: ActionManifest<GdriveDeleteResourceInputs, GdriveDeleteResourceOutputs>;
    readonly GDRIVE_DOWNLOAD_FILE: ActionManifest<GdriveDownloadFileInputs, GdriveDownloadFileOutputs>;
    readonly GDRIVE_GET_MOUNT_POINTS: ActionManifest<GdriveGetMountPointsInputs, GdriveGetMountPointsOutputs>;
    readonly GDRIVE_LIST_ITEMS: ActionManifest<GdriveListItemsInputs, GdriveListItemsOutputs>;
    readonly GDRIVE_UPLOAD_FILE: ActionManifest<GdriveUploadFileInputs, GdriveUploadFileOutputs>;
    readonly ONEDRIVE_CREATE_FOLDER: ActionManifest<OnedriveCreateFolderInputs, OnedriveCreateFolderOutputs>;
    readonly ONEDRIVE_DELETE_RESOURCE: ActionManifest<OnedriveDeleteResourceInputs, OnedriveDeleteResourceOutputs>;
    readonly ONEDRIVE_DOWNLOAD_FILE: ActionManifest<OnedriveDownloadFileInputs, OnedriveDownloadFileOutputs>;
    readonly ONEDRIVE_GET_MOUNT_POINTS: ActionManifest<OnedriveGetMountPointsInputs, OnedriveGetMountPointsOutputs>;
    readonly ONEDRIVE_LIST_ITEMS: ActionManifest<OnedriveListItemsInputs, OnedriveListItemsOutputs>;
    readonly ONEDRIVE_UPLOAD_FILE: ActionManifest<OnedriveUploadFileInputs, OnedriveUploadFileOutputs>;
    readonly RESEND_SEND_EMAIL: ActionManifest<ResendSendEmailInputs, ResendSendEmailOutputs>;
    readonly RUN_REBOLT_AGENT: ActionManifest<RunReboltAgentInputs, RunReboltAgentOutputs>;
    readonly EXA_AI_WEB_SEARCH: ActionManifest<ExaAiWebSearchInputs, ExaAiWebSearchOutputs>;
    readonly EXA_AI_WEB_CRAWL: ActionManifest<ExaAiWebCrawlInputs, ExaAiWebCrawlOutputs>;
    readonly DROPBOX_CREATE_FOLDER: ActionManifest<DropboxCreateFolderInputs, DropboxCreateFolderOutputs>;
    readonly DROPBOX_DELETE_RESOURCE: ActionManifest<DropboxDeleteResourceInputs, DropboxDeleteResourceOutputs>;
    readonly DROPBOX_DOWNLOAD_FILE: ActionManifest<DropboxDownloadFileInputs, DropboxDownloadFileOutputs>;
    readonly DROPBOX_GET_MOUNT_POINTS: ActionManifest<DropboxGetMountPointsInputs, DropboxGetMountPointsOutputs>;
    readonly DROPBOX_LIST_ITEMS: ActionManifest<DropboxListItemsInputs, DropboxListItemsOutputs>;
    readonly DROPBOX_UPLOAD_FILE: ActionManifest<DropboxUploadFileInputs, DropboxUploadFileOutputs>;
};
type ActionMap = {
    [K in keyof typeof actionDefinitions]: (typeof actionDefinitions)[K]["action_type"];
};
type ReboltActionTypeValue = (typeof ReboltActionType)[keyof typeof ReboltActionType];
declare const getAllActionTypes: () => ReboltActionTypeValue[];
declare const isValidActionType: (actionType: string) => actionType is ReboltActionTypeValue;

export { type GdriveListItemsOutputs as $, type ActionMap as A, type GmailReplyToEmailAction as B, GmailReplyToEmailManifest as C, GDRIVE_CREATE_FOLDER as D, type GdriveCreateFolderInputs as E, type GdriveCreateFolderOutputs as F, GMAIL_SEND_EMAIL as G, type GdriveCreateFolderAction as H, GdriveCreateFolderManifest as I, GDRIVE_DELETE_RESOURCE as J, type GdriveDeleteResourceInputs as K, type GdriveDeleteResourceOutputs as L, type GdriveDeleteResourceAction as M, GdriveDeleteResourceManifest as N, GDRIVE_DOWNLOAD_FILE as O, type GdriveDownloadFileInputs as P, type GdriveDownloadFileOutputs as Q, ReboltActionType as R, type GdriveDownloadFileAction as S, GdriveDownloadFileManifest as T, GDRIVE_GET_MOUNT_POINTS as U, type GdriveGetMountPointsInputs as V, type GdriveGetMountPointsOutputs as W, type GdriveGetMountPointsAction as X, GdriveGetMountPointsManifest as Y, GDRIVE_LIST_ITEMS as Z, type GdriveListItemsInputs as _, type ActionConfig as a, type DropboxDeleteResourceInputs as a$, type GdriveListItemsAction as a0, GdriveListItemsManifest as a1, GDRIVE_UPLOAD_FILE as a2, type GdriveUploadFileInputs as a3, type GdriveUploadFileOutputs as a4, type GdriveUploadFileAction as a5, GdriveUploadFileManifest as a6, ONEDRIVE_CREATE_FOLDER as a7, type OnedriveCreateFolderInputs as a8, type OnedriveCreateFolderOutputs as a9, OnedriveUploadFileManifest as aA, RESEND_SEND_EMAIL as aB, type ResendSendEmailInputs as aC, type ResendSendEmailOutputs as aD, type ResendSendEmailAction as aE, ResendSendEmailManifest as aF, RUN_REBOLT_AGENT as aG, type RunReboltAgentInputs as aH, type RunReboltAgentOutputs as aI, type RunReboltAgentAction as aJ, RunReboltAgentManifest as aK, EXA_AI_WEB_SEARCH as aL, type ExaAiWebSearchInputs as aM, type ExaAiWebSearchOutputs as aN, type ExaAiWebSearchAction as aO, ExaAiWebSearchManifest as aP, EXA_AI_WEB_CRAWL as aQ, type ExaAiWebCrawlInputs as aR, type ExaAiWebCrawlOutputs as aS, type ExaAiWebCrawlAction as aT, ExaAiWebCrawlManifest as aU, DROPBOX_CREATE_FOLDER as aV, type DropboxCreateFolderInputs as aW, type DropboxCreateFolderOutputs as aX, type DropboxCreateFolderAction as aY, DropboxCreateFolderManifest as aZ, DROPBOX_DELETE_RESOURCE as a_, type OnedriveCreateFolderAction as aa, OnedriveCreateFolderManifest as ab, ONEDRIVE_DELETE_RESOURCE as ac, type OnedriveDeleteResourceInputs as ad, type OnedriveDeleteResourceOutputs as ae, type OnedriveDeleteResourceAction as af, OnedriveDeleteResourceManifest as ag, ONEDRIVE_DOWNLOAD_FILE as ah, type OnedriveDownloadFileInputs as ai, type OnedriveDownloadFileOutputs as aj, type OnedriveDownloadFileAction as ak, OnedriveDownloadFileManifest as al, ONEDRIVE_GET_MOUNT_POINTS as am, type OnedriveGetMountPointsInputs as an, type OnedriveGetMountPointsOutputs as ao, type OnedriveGetMountPointsAction as ap, OnedriveGetMountPointsManifest as aq, ONEDRIVE_LIST_ITEMS as ar, type OnedriveListItemsInputs as as, type OnedriveListItemsOutputs as at, type OnedriveListItemsAction as au, OnedriveListItemsManifest as av, ONEDRIVE_UPLOAD_FILE as aw, type OnedriveUploadFileInputs as ax, type OnedriveUploadFileOutputs as ay, type OnedriveUploadFileAction as az, type ActionExecutionResponse as b, type DropboxDeleteResourceOutputs as b0, type DropboxDeleteResourceAction as b1, DropboxDeleteResourceManifest as b2, DROPBOX_DOWNLOAD_FILE as b3, type DropboxDownloadFileInputs as b4, type DropboxDownloadFileOutputs as b5, type DropboxDownloadFileAction as b6, DropboxDownloadFileManifest as b7, DROPBOX_GET_MOUNT_POINTS as b8, type DropboxGetMountPointsInputs as b9, type DropboxGetMountPointsOutputs as ba, type DropboxGetMountPointsAction as bb, DropboxGetMountPointsManifest as bc, DROPBOX_LIST_ITEMS as bd, type DropboxListItemsInputs as be, type DropboxListItemsOutputs as bf, type DropboxListItemsAction as bg, DropboxListItemsManifest as bh, DROPBOX_UPLOAD_FILE as bi, type DropboxUploadFileInputs as bj, type DropboxUploadFileOutputs as bk, type DropboxUploadFileAction as bl, DropboxUploadFileManifest as bm, type Action as c, type AnyAction as d, type ActionManifest as e, actionDefinitions as f, type ReboltActionTypeValue as g, getAllActionTypes as h, isValidActionType as i, type GmailSendEmailInputs as j, type GmailSendEmailOutputs as k, type GmailSendEmailAction as l, GmailSendEmailManifest as m, GMAIL_DELETE_EMAIL as n, type GmailDeleteEmailInputs as o, type GmailDeleteEmailOutputs as p, type GmailDeleteEmailAction as q, GmailDeleteEmailManifest as r, GMAIL_LIST_EMAILS as s, type GmailListEmailsInputs as t, type GmailListEmailsOutputs as u, type GmailListEmailsAction as v, GmailListEmailsManifest as w, GMAIL_REPLY_TO_EMAIL as x, type GmailReplyToEmailInputs as y, type GmailReplyToEmailOutputs as z };
