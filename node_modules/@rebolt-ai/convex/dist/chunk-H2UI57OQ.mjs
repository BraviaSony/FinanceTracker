var o=class{baseURL;apiKey;constructor(a){if(!a.apiKey)throw new Error("Rebolt API key is required.");this.baseURL=a.baseURL||"https://sdk.rebolt.ai/sdk/v1.0",this.apiKey=a.apiKey}async post(a,e){let t=`${this.baseURL}${a}`;try{let r=await fetch(t,{method:"POST",headers:{"x-api-key":this.apiKey,"Content-Type":"application/json"},body:JSON.stringify(e)});if(!r.ok)throw await r.json().catch(()=>({message:`HTTP error! status: ${r.status}`}));return await r.json()}catch(r){throw console.error(`API call to ${t} failed:`,r),r}}async get(a){let e=`${this.baseURL}${a}`;try{let t=await fetch(e,{method:"GET",headers:{"x-api-key":this.apiKey,Accept:"application/json"}});if(!t.ok)throw await t.json().catch(()=>({detail:`HTTP error! status: ${t.status}`}));return await t.json()}catch(t){throw console.error(`API call to ${e} failed:`,t),t}}async delete(a){let e=`${this.baseURL}${a}`;try{let t=await fetch(e,{method:"DELETE",headers:{"x-api-key":this.apiKey}});if(!t.ok)throw await t.json().catch(()=>({detail:`HTTP error! status: ${t.status}`}))}catch(t){throw console.error(`API call to ${e} failed:`,t),t}}async postFormData(a,e){let t=`${this.baseURL}${a}`;try{let r=await fetch(t,{method:"POST",headers:{"x-api-key":this.apiKey},body:e});if(!r.ok)throw await r.json().catch(()=>({detail:`HTTP error! status: ${r.status}`}));return await r.json()}catch(r){throw console.error(`API call to ${t} failed:`,r),r}}async getBlob(a){let e=`${this.baseURL}${a}`;try{let t=await fetch(e,{method:"GET",headers:{"x-api-key":this.apiKey}});if(!t.ok)throw await t.json().catch(()=>({detail:`HTTP error! status: ${t.status}`}));return await t.blob()}catch(t){throw console.error(`API call to ${e} failed:`,t),t}}};export{o as a};
